#!/usr/bin/env node

require('./src/tada/Tada/Server/Supervisor');
require('./src/tada/Tada/Command/Detect');

var spawnServer = function(env) {
  var supervisor = new Tada.Server.Supervisor({ env: env || 'prod' });

  supervisor.isServerRunning(function(err, result) {
    if (err) {
      throw Error(err);
    }

    if (result) {
      console.log("ERROR: Server already running at http://localhost:" + supervisor.getConfig('server/port') + "/");
      program.help();
    } else {
      supervisor.spawnServer();
    }
  });
}

var program = require('commander');
program
  .option('-v, --verbose', 'Verbose logging', null);

program
  .command('server [env]')
  .description('start tada server for this project')
  .action(spawnServer);

program
  .command('server-foreground [env] [logfile]')
  .description('start tada server for this project')
  .action(function(env, logfile) {
    new Tada.Server.Supervisor({ env: env || 'prod', logFile: logfile })
      .startServer();
  });

program
  .command('stop')
  .description('stop tada server for this project')
  .action(function(env) {
    new Tada.Server.Supervisor({ env: 'prod' })
      .stopServer();
  });

program
  .command('detect')
  .description('Collect git repositories under current path and create a default config file')
  .action(function(env) {
    new Tada.Command.Detect({})
      .start(process.cwd(), function(err, config){
        if (err) {
          console.log(err);
        }
        process.kill();
      });
  });

program
  .command('*')
  .description('any other sentence given will be forwarded to the tada server')
  .action(function(expression){
    console.log('Executing "%s"', expression);
  });

program
  .parse(process.argv);

if (!program.args.length) {
  spawnServer('prod');
}
